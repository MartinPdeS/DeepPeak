
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/classifier_autoencoder.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_classifier_autoencoder.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_classifier_autoencoder.py:


DenseNet Classifier: Detecting Regions of Interest in Synthetic Signals
======================================================================

This example demonstrates how to use DeepPeak's DenseNet classifier to identify
regions of interest (ROIs) in synthetic 1D signals containing Gaussian peaks.

We will:
- Generate a dataset of noisy signals with random Gaussian peaks
- Build and train a DenseNet classifier to detect ROIs
- Visualize the training process and model predictions

.. note::
    This example is fully reproducible and suitable for Sphinx-Gallery documentation.

.. GENERATED FROM PYTHON SOURCE LINES 19-21

Imports and reproducibility
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    from DeepPeak.signals import SignalDatasetGenerator, Kernel
    from DeepPeak.machine_learning.classifier import Autoencoder

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Generate synthetic dataset
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-50

.. code-block:: Python

    NUM_PEAKS = 3
    SEQUENCE_LENGTH = 200

    generator = SignalDatasetGenerator(
        n_samples=100,
        sequence_length=SEQUENCE_LENGTH
    )

    dataset = generator.generate(
        signal_type=Kernel.GAUSSIAN,
        n_peaks=(1, NUM_PEAKS),
        amplitude=(1, 20),
        position=(0.1, 0.9),
        width=(0.03, 0.05),
        noise_std=0.1,
        categorical_peak_count=False,
        compute_region_of_interest=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Visualize a few example signals and their regions of interest
------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    dataset.plot(number_of_samples=3)




.. image-sg:: /gallery/images/sphx_glr_classifier_autoencoder_001.png
   :alt: classifier autoencoder
   :srcset: /gallery/images/sphx_glr_classifier_autoencoder_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-58

Build and summarize the WaveNet classifier
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 58-72

.. code-block:: Python

    dense_net = Autoencoder(
        sequence_length=SEQUENCE_LENGTH,
        dropout_rate=0.30,
        filters=(32, 64, 128),
        kernel_size=3,
        pool_size=2,
        upsample_size=2,
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    dense_net.build()
    dense_net.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Model: "AutoencoderROILocator"
    ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
    ┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃
    ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
    │ input (InputLayer)              │ (None, 200, 1)         │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ enc_conv0 (Conv1D)              │ (None, 200, 32)        │           128 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ enc_drop0 (Dropout)             │ (None, 200, 32)        │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ enc_pool0 (MaxPooling1D)        │ (None, 100, 32)        │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ enc_conv1 (Conv1D)              │ (None, 100, 64)        │         6,208 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ enc_drop1 (Dropout)             │ (None, 100, 64)        │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ enc_pool1 (MaxPooling1D)        │ (None, 50, 64)         │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ bottleneck_conv (Conv1D)        │ (None, 50, 128)        │        24,704 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ bottleneck_drop (Dropout)       │ (None, 50, 128)        │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ dec_up0 (UpSampling1D)          │ (None, 100, 128)       │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ dec_conv0 (Conv1D)              │ (None, 100, 64)        │        24,640 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ dec_up1 (UpSampling1D)          │ (None, 200, 64)        │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ dec_conv1 (Conv1D)              │ (None, 200, 32)        │         6,176 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ ROI (Conv1D)                    │ (None, 200, 1)         │            33 │
    └─────────────────────────────────┴────────────────────────┴───────────────┘
     Total params: 61,889 (241.75 KB)
     Trainable params: 61,889 (241.75 KB)
     Non-trainable params: 0 (0.00 B)




.. GENERATED FROM PYTHON SOURCE LINES 73-75

Train the classifier
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 75-83

.. code-block:: Python

    history = dense_net.fit(
        dataset.signals,
        dataset.region_of_interest,
        validation_split=0.2,
        epochs=20,
        batch_size=64
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 1/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 1s 2s/step - accuracy: 0.8923 - loss: 0.6700    2/2 ━━━━━━━━━━━━━━━━━━━━ 2s 262ms/step - accuracy: 0.9036 - loss: 0.6689 - val_accuracy: 0.9613 - val_loss: 0.6462
    Epoch 2/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 42ms/step - accuracy: 0.9476 - loss: 0.6227    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.9480 - loss: 0.6184 - val_accuracy: 0.9745 - val_loss: 0.6327
    Epoch 3/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 41ms/step - accuracy: 0.9490 - loss: 0.5839    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.9495 - loss: 0.5829 - val_accuracy: 0.9690 - val_loss: 0.5839
    Epoch 4/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 41ms/step - accuracy: 0.9513 - loss: 0.5513    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9506 - loss: 0.5417 - val_accuracy: 0.9660 - val_loss: 0.5435
    Epoch 5/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9563 - loss: 0.4862    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9540 - loss: 0.4835 - val_accuracy: 0.9512 - val_loss: 0.4857
    Epoch 6/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9566 - loss: 0.4116    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9556 - loss: 0.4055 - val_accuracy: 0.9620 - val_loss: 0.3823
    Epoch 7/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 40ms/step - accuracy: 0.9539 - loss: 0.3485    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9531 - loss: 0.3366 - val_accuracy: 0.9530 - val_loss: 0.3002
    Epoch 8/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9544 - loss: 0.2572    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9529 - loss: 0.2473 - val_accuracy: 0.9490 - val_loss: 0.2129
    Epoch 9/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9559 - loss: 0.1736    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9556 - loss: 0.1707 - val_accuracy: 0.9582 - val_loss: 0.1407
    Epoch 10/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9592 - loss: 0.1285    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9591 - loss: 0.1226 - val_accuracy: 0.9517 - val_loss: 0.1237
    Epoch 11/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9552 - loss: 0.1091    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9569 - loss: 0.1047 - val_accuracy: 0.9615 - val_loss: 0.1087
    Epoch 12/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9545 - loss: 0.0988    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.9531 - loss: 0.1007 - val_accuracy: 0.9717 - val_loss: 0.0992
    Epoch 13/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 40ms/step - accuracy: 0.9565 - loss: 0.0944    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.9553 - loss: 0.0952 - val_accuracy: 0.9693 - val_loss: 0.0990
    Epoch 14/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 40ms/step - accuracy: 0.9609 - loss: 0.0911    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.9598 - loss: 0.0937 - val_accuracy: 0.9638 - val_loss: 0.0981
    Epoch 15/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 90ms/step - accuracy: 0.9588 - loss: 0.0913    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9577 - loss: 0.0964 - val_accuracy: 0.9667 - val_loss: 0.0946
    Epoch 16/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9584 - loss: 0.0917    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9604 - loss: 0.0886 - val_accuracy: 0.9712 - val_loss: 0.0895
    Epoch 17/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9577 - loss: 0.0910    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9586 - loss: 0.0895 - val_accuracy: 0.9735 - val_loss: 0.0850
    Epoch 18/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9588 - loss: 0.0877    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9597 - loss: 0.0859 - val_accuracy: 0.9668 - val_loss: 0.0882
    Epoch 19/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9596 - loss: 0.0867    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.9596 - loss: 0.0918 - val_accuracy: 0.9587 - val_loss: 0.0935
    Epoch 20/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9588 - loss: 0.0942    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9587 - loss: 0.0949 - val_accuracy: 0.9632 - val_loss: 0.0914




.. GENERATED FROM PYTHON SOURCE LINES 84-86

Plot training history
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 86-88

.. code-block:: Python

    dense_net.plot_model_history(history)




.. image-sg:: /gallery/images/sphx_glr_classifier_autoencoder_002.png
   :alt: Loss, Accuracy
   :srcset: /gallery/images/sphx_glr_classifier_autoencoder_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 89-91

Predict and visualize on a test signal
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python

    dense_net.plot_prediction(
        signal=dataset.signals[0:1, :],
        threshold=0.4
    )


.. image-sg:: /gallery/images/sphx_glr_classifier_autoencoder_003.png
   :alt: Predicted Region of Interest
   :srcset: /gallery/images/sphx_glr_classifier_autoencoder_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 1 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.092 seconds)


.. _sphx_glr_download_gallery_classifier_autoencoder.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: classifier_autoencoder.ipynb <classifier_autoencoder.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: classifier_autoencoder.py <classifier_autoencoder.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: classifier_autoencoder.zip <classifier_autoencoder.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
