
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/classifier_wavenet.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_classifier_wavenet.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_classifier_wavenet.py:


DenseNet Classifier: Detecting Regions of Interest in Synthetic Signals
======================================================================

This example demonstrates how to use DeepPeak's DenseNet classifier to identify
regions of interest (ROIs) in synthetic 1D signals containing Gaussian peaks.

We will:
- Generate a dataset of noisy signals with random Gaussian peaks
- Build and train a DenseNet classifier to detect ROIs
- Visualize the training process and model predictions

.. note::
    This example is fully reproducible and suitable for Sphinx-Gallery documentation.

.. GENERATED FROM PYTHON SOURCE LINES 19-21

Imports and reproducibility
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    from DeepPeak.signals import SignalDatasetGenerator, Kernel
    from DeepPeak.machine_learning.classifier import WaveNet

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Generate synthetic dataset
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-50

.. code-block:: Python

    NUM_PEAKS = 3
    SEQUENCE_LENGTH = 200

    generator = SignalDatasetGenerator(
        n_samples=100,
        sequence_length=SEQUENCE_LENGTH
    )

    dataset = generator.generate(
        signal_type=Kernel.GAUSSIAN,
        n_peaks=(1, NUM_PEAKS),
        amplitude=(1, 20),
        position=(0.1, 0.9),
        width=(0.03, 0.05),
        noise_std=0.1,
        categorical_peak_count=False,
        compute_region_of_interest=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Visualize a few example signals and their regions of interest
------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    dataset.plot(number_of_samples=3)




.. image-sg:: /gallery/images/sphx_glr_classifier_wavenet_001.png
   :alt: classifier wavenet
   :srcset: /gallery/images/sphx_glr_classifier_wavenet_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-58

Build and summarize the WaveNet classifier
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 58-70

.. code-block:: Python

    dense_net = WaveNet(
        sequence_length=SEQUENCE_LENGTH,
        num_filters=64,
        num_dilation_layers=6,
        kernel_size=3,
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    dense_net.build()
    dense_net.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Model: "WaveNetDetector"
    ┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
    ┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
    ┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
    │ input (InputLayer)  │ (None, 200, 1)    │          0 │ -                 │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ input_projection    │ (None, 200, 64)   │        128 │ input[0][0]       │
    │ (Conv1D)            │                   │            │                   │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ dilated_conv_0      │ (None, 200, 64)   │     12,352 │ input_projection… │
    │ (Conv1D)            │                   │            │                   │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ res_0 (Conv1D)      │ (None, 200, 64)   │      4,160 │ dilated_conv_0[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ residual_add_0      │ (None, 200, 64)   │          0 │ input_projection… │
    │ (Add)               │                   │            │ res_0[0][0]       │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ dilated_conv_1      │ (None, 200, 64)   │     12,352 │ residual_add_0[0… │
    │ (Conv1D)            │                   │            │                   │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ res_1 (Conv1D)      │ (None, 200, 64)   │      4,160 │ dilated_conv_1[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ residual_add_1      │ (None, 200, 64)   │          0 │ residual_add_0[0… │
    │ (Add)               │                   │            │ res_1[0][0]       │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ dilated_conv_2      │ (None, 200, 64)   │     12,352 │ residual_add_1[0… │
    │ (Conv1D)            │                   │            │                   │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ res_2 (Conv1D)      │ (None, 200, 64)   │      4,160 │ dilated_conv_2[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ residual_add_2      │ (None, 200, 64)   │          0 │ residual_add_1[0… │
    │ (Add)               │                   │            │ res_2[0][0]       │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ dilated_conv_3      │ (None, 200, 64)   │     12,352 │ residual_add_2[0… │
    │ (Conv1D)            │                   │            │                   │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ res_3 (Conv1D)      │ (None, 200, 64)   │      4,160 │ dilated_conv_3[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ residual_add_3      │ (None, 200, 64)   │          0 │ residual_add_2[0… │
    │ (Add)               │                   │            │ res_3[0][0]       │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ dilated_conv_4      │ (None, 200, 64)   │     12,352 │ residual_add_3[0… │
    │ (Conv1D)            │                   │            │                   │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ res_4 (Conv1D)      │ (None, 200, 64)   │      4,160 │ dilated_conv_4[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ residual_add_4      │ (None, 200, 64)   │          0 │ residual_add_3[0… │
    │ (Add)               │                   │            │ res_4[0][0]       │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ dilated_conv_5      │ (None, 200, 64)   │     12,352 │ residual_add_4[0… │
    │ (Conv1D)            │                   │            │                   │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ res_5 (Conv1D)      │ (None, 200, 64)   │      4,160 │ dilated_conv_5[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ residual_add_5      │ (None, 200, 64)   │          0 │ residual_add_4[0… │
    │ (Add)               │                   │            │ res_5[0][0]       │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ skip_0 (Conv1D)     │ (None, 200, 64)   │      4,160 │ residual_add_0[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ skip_1 (Conv1D)     │ (None, 200, 64)   │      4,160 │ residual_add_1[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ skip_2 (Conv1D)     │ (None, 200, 64)   │      4,160 │ residual_add_2[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ skip_3 (Conv1D)     │ (None, 200, 64)   │      4,160 │ residual_add_3[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ skip_4 (Conv1D)     │ (None, 200, 64)   │      4,160 │ residual_add_4[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ skip_5 (Conv1D)     │ (None, 200, 64)   │      4,160 │ residual_add_5[0… │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ skip_add (Add)      │ (None, 200, 64)   │          0 │ skip_0[0][0],     │
    │                     │                   │            │ skip_1[0][0],     │
    │                     │                   │            │ skip_2[0][0],     │
    │                     │                   │            │ skip_3[0][0],     │
    │                     │                   │            │ skip_4[0][0],     │
    │                     │                   │            │ skip_5[0][0]      │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ post_relu (ReLU)    │ (None, 200, 64)   │          0 │ skip_add[0][0]    │
    ├─────────────────────┼───────────────────┼────────────┼───────────────────┤
    │ output (Conv1D)     │ (None, 200, 1)    │         65 │ post_relu[0][0]   │
    └─────────────────────┴───────────────────┴────────────┴───────────────────┘
     Total params: 124,225 (485.25 KB)
     Trainable params: 124,225 (485.25 KB)
     Non-trainable params: 0 (0.00 B)




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Train the classifier
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: Python

    history = dense_net.fit(
        dataset.signals,
        dataset.region_of_interest,
        validation_split=0.2,
        epochs=20,
        batch_size=64
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 1/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 4s 4s/step - accuracy: 0.7549 - loss: 1.0374    2/2 ━━━━━━━━━━━━━━━━━━━━ 5s 444ms/step - accuracy: 0.7931 - loss: 0.9035 - val_accuracy: 0.8580 - val_loss: 0.8507
    Epoch 2/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 109ms/step - accuracy: 0.8280 - loss: 1.1302    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 75ms/step - accuracy: 0.8423 - loss: 1.0158 - val_accuracy: 0.9613 - val_loss: 0.3707
    Epoch 3/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 102ms/step - accuracy: 0.9505 - loss: 0.5003    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 75ms/step - accuracy: 0.9496 - loss: 0.5280 - val_accuracy: 0.9613 - val_loss: 0.3476
    Epoch 4/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 102ms/step - accuracy: 0.9491 - loss: 0.5018    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9496 - loss: 0.4745 - val_accuracy: 0.9710 - val_loss: 0.1581
    Epoch 5/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 102ms/step - accuracy: 0.9569 - loss: 0.2319    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 75ms/step - accuracy: 0.9556 - loss: 0.2299 - val_accuracy: 0.9605 - val_loss: 0.1631
    Epoch 6/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9416 - loss: 0.2345    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 75ms/step - accuracy: 0.9434 - loss: 0.2188 - val_accuracy: 0.9613 - val_loss: 0.1477
    Epoch 7/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 102ms/step - accuracy: 0.9488 - loss: 0.2189    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9495 - loss: 0.2018 - val_accuracy: 0.9620 - val_loss: 0.1077
    Epoch 8/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9478 - loss: 0.1546    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9486 - loss: 0.1477 - val_accuracy: 0.9677 - val_loss: 0.0836
    Epoch 9/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 102ms/step - accuracy: 0.9573 - loss: 0.1120    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9566 - loss: 0.1115 - val_accuracy: 0.9665 - val_loss: 0.0841
    Epoch 10/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 100ms/step - accuracy: 0.9566 - loss: 0.1057    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9554 - loss: 0.1069 - val_accuracy: 0.9677 - val_loss: 0.0869
    Epoch 11/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9570 - loss: 0.1026    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 75ms/step - accuracy: 0.9563 - loss: 0.1048 - val_accuracy: 0.9625 - val_loss: 0.0951
    Epoch 12/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 100ms/step - accuracy: 0.9518 - loss: 0.1160    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9516 - loss: 0.1134 - val_accuracy: 0.9685 - val_loss: 0.0812
    Epoch 13/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9589 - loss: 0.0955    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 76ms/step - accuracy: 0.9603 - loss: 0.0948 - val_accuracy: 0.9718 - val_loss: 0.0777
    Epoch 14/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 104ms/step - accuracy: 0.9609 - loss: 0.0925    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 73ms/step - accuracy: 0.9619 - loss: 0.0900 - val_accuracy: 0.9653 - val_loss: 0.0775
    Epoch 15/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9565 - loss: 0.0976    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9574 - loss: 0.0961 - val_accuracy: 0.9728 - val_loss: 0.0677
    Epoch 16/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9593 - loss: 0.0903    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9618 - loss: 0.0866 - val_accuracy: 0.9725 - val_loss: 0.0681
    Epoch 17/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 102ms/step - accuracy: 0.9581 - loss: 0.0921    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9598 - loss: 0.0884 - val_accuracy: 0.9677 - val_loss: 0.0657
    Epoch 18/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 102ms/step - accuracy: 0.9584 - loss: 0.0862    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9596 - loss: 0.0848 - val_accuracy: 0.9743 - val_loss: 0.0624
    Epoch 19/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 104ms/step - accuracy: 0.9645 - loss: 0.0804    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9641 - loss: 0.0811 - val_accuracy: 0.9753 - val_loss: 0.0612
    Epoch 20/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9652 - loss: 0.0789    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 74ms/step - accuracy: 0.9641 - loss: 0.0802 - val_accuracy: 0.9703 - val_loss: 0.0597




.. GENERATED FROM PYTHON SOURCE LINES 82-84

Plot training history
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: Python

    dense_net.plot_model_history(history)




.. image-sg:: /gallery/images/sphx_glr_classifier_wavenet_002.png
   :alt: Loss, Accuracy
   :srcset: /gallery/images/sphx_glr_classifier_wavenet_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-89

Predict and visualize on a test signal
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: Python

    dense_net.plot_prediction(
        signal=dataset.signals[0:1, :],
        threshold=0.4
    )


.. image-sg:: /gallery/images/sphx_glr_classifier_wavenet_003.png
   :alt: Predicted Region of Interest
   :srcset: /gallery/images/sphx_glr_classifier_wavenet_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 1 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.639 seconds)


.. _sphx_glr_download_gallery_classifier_wavenet.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: classifier_wavenet.ipynb <classifier_wavenet.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: classifier_wavenet.py <classifier_wavenet.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: classifier_wavenet.zip <classifier_wavenet.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
