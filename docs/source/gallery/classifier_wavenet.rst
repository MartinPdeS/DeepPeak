
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/classifier_wavenet.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_classifier_wavenet.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_classifier_wavenet.py:


DenseNet Classifier: Detecting Regions of Interest in Synthetic Signals
======================================================================

This example demonstrates how to use DeepPeak's DenseNet classifier to identify
regions of interest (ROIs) in synthetic 1D signals containing Gaussian peaks.

We will:
- Generate a dataset of noisy signals with random Gaussian peaks
- Build and train a DenseNet classifier to detect ROIs
- Visualize the training process and model predictions

.. note::
    This example is fully reproducible and suitable for Sphinx-Gallery documentation.

.. GENERATED FROM PYTHON SOURCE LINES 19-21

Imports and reproducibility
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    from DeepPeak.signals import SignalDatasetGenerator, Kernel
    from DeepPeak.machine_learning.classifier import WaveNet

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Generate synthetic dataset
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-50

.. code-block:: Python

    NUM_PEAKS = 3
    SEQUENCE_LENGTH = 200

    generator = SignalDatasetGenerator(
        n_samples=100,
        sequence_length=SEQUENCE_LENGTH
    )

    dataset = generator.generate(
        signal_type=Kernel.GAUSSIAN,
        n_peaks=(1, NUM_PEAKS),
        amplitude=(1, 20),
        position=(0.1, 0.9),
        width=(0.03, 0.05),
        noise_std=0.1,
        categorical_peak_count=False,
        compute_region_of_interest=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Visualize a few example signals and their regions of interest
------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    dataset.plot(number_of_samples=3)




.. image-sg:: /gallery/images/sphx_glr_classifier_wavenet_001.png
   :alt: classifier wavenet
   :srcset: /gallery/images/sphx_glr_classifier_wavenet_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-58

Build and summarize the WaveNet classifier
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 58-70

.. code-block:: Python

    dense_net = WaveNet(
        sequence_length=SEQUENCE_LENGTH,
        num_filters=64,
        num_dilation_layers=6,
        kernel_size=3,
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    dense_net.build()
    dense_net.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Model: "WaveNetDetector"
    ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Layer (type)                  ┃ Output Shape              ┃         Param # ┃ Connected to               ┃
    ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │ input (InputLayer)            │ (None, 200, 1)            │               0 │ -                          │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ input_projection (Conv1D)     │ (None, 200, 64)           │             128 │ input[0][0]                │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ dilated_conv_0 (Conv1D)       │ (None, 200, 64)           │          12,352 │ input_projection[0][0]     │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ res_0 (Conv1D)                │ (None, 200, 64)           │           4,160 │ dilated_conv_0[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ residual_add_0 (Add)          │ (None, 200, 64)           │               0 │ input_projection[0][0],    │
    │                               │                           │                 │ res_0[0][0]                │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ dilated_conv_1 (Conv1D)       │ (None, 200, 64)           │          12,352 │ residual_add_0[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ res_1 (Conv1D)                │ (None, 200, 64)           │           4,160 │ dilated_conv_1[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ residual_add_1 (Add)          │ (None, 200, 64)           │               0 │ residual_add_0[0][0],      │
    │                               │                           │                 │ res_1[0][0]                │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ dilated_conv_2 (Conv1D)       │ (None, 200, 64)           │          12,352 │ residual_add_1[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ res_2 (Conv1D)                │ (None, 200, 64)           │           4,160 │ dilated_conv_2[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ residual_add_2 (Add)          │ (None, 200, 64)           │               0 │ residual_add_1[0][0],      │
    │                               │                           │                 │ res_2[0][0]                │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ dilated_conv_3 (Conv1D)       │ (None, 200, 64)           │          12,352 │ residual_add_2[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ res_3 (Conv1D)                │ (None, 200, 64)           │           4,160 │ dilated_conv_3[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ residual_add_3 (Add)          │ (None, 200, 64)           │               0 │ residual_add_2[0][0],      │
    │                               │                           │                 │ res_3[0][0]                │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ dilated_conv_4 (Conv1D)       │ (None, 200, 64)           │          12,352 │ residual_add_3[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ res_4 (Conv1D)                │ (None, 200, 64)           │           4,160 │ dilated_conv_4[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ residual_add_4 (Add)          │ (None, 200, 64)           │               0 │ residual_add_3[0][0],      │
    │                               │                           │                 │ res_4[0][0]                │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ dilated_conv_5 (Conv1D)       │ (None, 200, 64)           │          12,352 │ residual_add_4[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ res_5 (Conv1D)                │ (None, 200, 64)           │           4,160 │ dilated_conv_5[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ residual_add_5 (Add)          │ (None, 200, 64)           │               0 │ residual_add_4[0][0],      │
    │                               │                           │                 │ res_5[0][0]                │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ skip_0 (Conv1D)               │ (None, 200, 64)           │           4,160 │ residual_add_0[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ skip_1 (Conv1D)               │ (None, 200, 64)           │           4,160 │ residual_add_1[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ skip_2 (Conv1D)               │ (None, 200, 64)           │           4,160 │ residual_add_2[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ skip_3 (Conv1D)               │ (None, 200, 64)           │           4,160 │ residual_add_3[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ skip_4 (Conv1D)               │ (None, 200, 64)           │           4,160 │ residual_add_4[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ skip_5 (Conv1D)               │ (None, 200, 64)           │           4,160 │ residual_add_5[0][0]       │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ skip_add (Add)                │ (None, 200, 64)           │               0 │ skip_0[0][0],              │
    │                               │                           │                 │ skip_1[0][0],              │
    │                               │                           │                 │ skip_2[0][0],              │
    │                               │                           │                 │ skip_3[0][0],              │
    │                               │                           │                 │ skip_4[0][0], skip_5[0][0] │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ post_relu (ReLU)              │ (None, 200, 64)           │               0 │ skip_add[0][0]             │
    ├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤
    │ output (Conv1D)               │ (None, 200, 1)            │              65 │ post_relu[0][0]            │
    └───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘
     Total params: 124,225 (485.25 KB)
     Trainable params: 124,225 (485.25 KB)
     Non-trainable params: 0 (0.00 B)




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Train the classifier
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: Python

    history = dense_net.fit(
        dataset.signals,
        dataset.region_of_interest,
        validation_split=0.2,
        epochs=20,
        batch_size=64
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 1/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 2s 3s/step - accuracy: 0.3767 - loss: 1.5740    2/2 ━━━━━━━━━━━━━━━━━━━━ 3s 296ms/step - accuracy: 0.4529 - loss: 1.4869 - val_accuracy: 0.9612 - val_loss: 0.7419
    Epoch 2/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 88ms/step - accuracy: 0.9497 - loss: 0.9221    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - accuracy: 0.9496 - loss: 0.9210 - val_accuracy: 0.9612 - val_loss: 0.6951
    Epoch 3/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 82ms/step - accuracy: 0.9498 - loss: 0.8774    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - accuracy: 0.9497 - loss: 0.8772 - val_accuracy: 0.9612 - val_loss: 0.6576
    Epoch 4/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 82ms/step - accuracy: 0.9495 - loss: 0.8506    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - accuracy: 0.9496 - loss: 0.8472 - val_accuracy: 0.9612 - val_loss: 0.6396
    Epoch 5/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 86ms/step - accuracy: 0.9481 - loss: 0.8516    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 83ms/step - accuracy: 0.9491 - loss: 0.8353 - val_accuracy: 0.9612 - val_loss: 0.6329
    Epoch 6/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 85ms/step - accuracy: 0.9505 - loss: 0.8061    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 64ms/step - accuracy: 0.9499 - loss: 0.8154 - val_accuracy: 0.9612 - val_loss: 0.6296
    Epoch 7/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 80ms/step - accuracy: 0.9493 - loss: 0.8215    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - accuracy: 0.9495 - loss: 0.8179 - val_accuracy: 0.9612 - val_loss: 0.6271
    Epoch 8/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 90ms/step - accuracy: 0.9499 - loss: 0.8095    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 63ms/step - accuracy: 0.9497 - loss: 0.8126 - val_accuracy: 0.9612 - val_loss: 0.6259
    Epoch 9/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 83ms/step - accuracy: 0.9488 - loss: 0.8273    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - accuracy: 0.9493 - loss: 0.8179 - val_accuracy: 0.9612 - val_loss: 0.6253
    Epoch 10/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 83ms/step - accuracy: 0.9495 - loss: 0.8155    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 64ms/step - accuracy: 0.9496 - loss: 0.8136 - val_accuracy: 0.9612 - val_loss: 0.6250
    Epoch 11/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 84ms/step - accuracy: 0.9503 - loss: 0.8013    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 80ms/step - accuracy: 0.9499 - loss: 0.8087 - val_accuracy: 0.9612 - val_loss: 0.6249
    Epoch 12/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 98ms/step - accuracy: 0.9491 - loss: 0.8200    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 78ms/step - accuracy: 0.9495 - loss: 0.8148 - val_accuracy: 0.9612 - val_loss: 0.6248
    Epoch 13/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 95ms/step - accuracy: 0.9488 - loss: 0.8262    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 78ms/step - accuracy: 0.9493 - loss: 0.8168 - val_accuracy: 0.9612 - val_loss: 0.6247
    Epoch 14/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 88ms/step - accuracy: 0.9491 - loss: 0.8199    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 75ms/step - accuracy: 0.9495 - loss: 0.8147 - val_accuracy: 0.9612 - val_loss: 0.6247
    Epoch 15/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 95ms/step - accuracy: 0.9496 - loss: 0.8123    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 78ms/step - accuracy: 0.9496 - loss: 0.8121 - val_accuracy: 0.9612 - val_loss: 0.6247
    Epoch 16/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 95ms/step - accuracy: 0.9502 - loss: 0.8035    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 77ms/step - accuracy: 0.9498 - loss: 0.8092 - val_accuracy: 0.9612 - val_loss: 0.6246
    Epoch 17/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 96ms/step - accuracy: 0.9495 - loss: 0.8148    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 77ms/step - accuracy: 0.9496 - loss: 0.8129 - val_accuracy: 0.9612 - val_loss: 0.6246
    Epoch 18/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 96ms/step - accuracy: 0.9488 - loss: 0.8261    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 99ms/step - accuracy: 0.9493 - loss: 0.8167 - val_accuracy: 0.9612 - val_loss: 0.6246
    Epoch 19/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 110ms/step - accuracy: 0.9498 - loss: 0.8097    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 101ms/step - accuracy: 0.9497 - loss: 0.8112 - val_accuracy: 0.9612 - val_loss: 0.6246
    Epoch 20/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 108ms/step - accuracy: 0.9489 - loss: 0.8236    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 86ms/step - accuracy: 0.9494 - loss: 0.8158 - val_accuracy: 0.9612 - val_loss: 0.6246




.. GENERATED FROM PYTHON SOURCE LINES 82-84

Plot training history
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: Python

    dense_net.plot_model_history(history)




.. image-sg:: /gallery/images/sphx_glr_classifier_wavenet_002.png
   :alt: Loss, Accuracy
   :srcset: /gallery/images/sphx_glr_classifier_wavenet_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-89

Predict and visualize on a test signal
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: Python

    dense_net.plot_prediction(
        signal=dataset.signals[0:1, :],
        threshold=0.4
    )


.. image-sg:: /gallery/images/sphx_glr_classifier_wavenet_003.png
   :alt: Predicted Region of Interest
   :srcset: /gallery/images/sphx_glr_classifier_wavenet_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 1 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 7.168 seconds)


.. _sphx_glr_download_gallery_classifier_wavenet.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: classifier_wavenet.ipynb <classifier_wavenet.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: classifier_wavenet.py <classifier_wavenet.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: classifier_wavenet.zip <classifier_wavenet.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
