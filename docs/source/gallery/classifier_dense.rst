
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/classifier_dense.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_classifier_dense.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_classifier_dense.py:


DenseNet Classifier: Detecting Regions of Interest in Synthetic Signals
======================================================================

This example demonstrates how to use DeepPeak's DenseNet classifier to identify
regions of interest (ROIs) in synthetic 1D signals containing Gaussian peaks.

We will:
- Generate a dataset of noisy signals with random Gaussian peaks
- Build and train a DenseNet classifier to detect ROIs
- Visualize the training process and model predictions

.. note::
    This example is fully reproducible and suitable for Sphinx-Gallery documentation.

.. GENERATED FROM PYTHON SOURCE LINES 19-21

Imports and reproducibility
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    from DeepPeak.signals import SignalDatasetGenerator, Kernel
    from DeepPeak.machine_learning.classifier import DenseNet

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Generate synthetic dataset
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-50

.. code-block:: Python

    NUM_PEAKS = 3
    SEQUENCE_LENGTH = 200

    generator = SignalDatasetGenerator(
        n_samples=100,
        sequence_length=SEQUENCE_LENGTH
    )

    dataset = generator.generate(
        signal_type=Kernel.GAUSSIAN,
        n_peaks=(1, NUM_PEAKS),
        amplitude=(1, 20),
        position=(0.1, 0.9),
        width=(0.03, 0.05),
        noise_std=0.1,
        categorical_peak_count=False,
        compute_region_of_interest=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Visualize a few example signals and their regions of interest
------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    dataset.plot(number_of_samples=3)




.. image-sg:: /gallery/images/sphx_glr_classifier_dense_001.png
   :alt: classifier dense
   :srcset: /gallery/images/sphx_glr_classifier_dense_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-58

Build and summarize the DenseNet classifier
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 58-70

.. code-block:: Python

    dense_net = DenseNet(
        sequence_length=SEQUENCE_LENGTH,
        filters=(32, 64, 128),
        dilation_rates=(1, 2, 4),
        kernel_size=3,
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    dense_net.build()
    dense_net.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Model: "DenseNetDetector"
    ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
    ┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃
    ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
    │ input (InputLayer)                   │ (None, 200, 1)              │               0 │
    ├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
    │ conv_0 (Conv1D)                      │ (None, 200, 32)             │             128 │
    ├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
    │ conv_1 (Conv1D)                      │ (None, 200, 64)             │           6,208 │
    ├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
    │ conv_2 (Conv1D)                      │ (None, 200, 128)            │          24,704 │
    ├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
    │ ROI (Conv1D)                         │ (None, 200, 1)              │             129 │
    └──────────────────────────────────────┴─────────────────────────────┴─────────────────┘
     Total params: 31,169 (121.75 KB)
     Trainable params: 31,169 (121.75 KB)
     Non-trainable params: 0 (0.00 B)




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Train the classifier
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: Python

    history = dense_net.fit(
        dataset.signals,
        dataset.region_of_interest,
        validation_split=0.2,
        epochs=20,
        batch_size=64
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 1/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 767ms/step - accuracy: 0.9063 - loss: 0.6783    2/2 ━━━━━━━━━━━━━━━━━━━━ 1s 171ms/step - accuracy: 0.9123 - loss: 0.6760 - val_accuracy: 0.9612 - val_loss: 0.6523
    Epoch 2/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 40ms/step - accuracy: 0.9495 - loss: 0.6431    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 37ms/step - accuracy: 0.9496 - loss: 0.6396 - val_accuracy: 0.9612 - val_loss: 0.6184
    Epoch 3/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - accuracy: 0.9496 - loss: 0.6083    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9496 - loss: 0.6071 - val_accuracy: 0.9612 - val_loss: 0.5915
    Epoch 4/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - accuracy: 0.9495 - loss: 0.5786    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 42ms/step - accuracy: 0.9496 - loss: 0.5756 - val_accuracy: 0.9627 - val_loss: 0.5664
    Epoch 5/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - accuracy: 0.9523 - loss: 0.5473    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9525 - loss: 0.5444 - val_accuracy: 0.9615 - val_loss: 0.5324
    Epoch 6/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - accuracy: 0.9501 - loss: 0.5154    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 41ms/step - accuracy: 0.9501 - loss: 0.5115 - val_accuracy: 0.9632 - val_loss: 0.4969
    Epoch 7/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - accuracy: 0.9532 - loss: 0.4795    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 39ms/step - accuracy: 0.9544 - loss: 0.4757 - val_accuracy: 0.9817 - val_loss: 0.4601
    Epoch 8/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 37ms/step - accuracy: 0.9725 - loss: 0.4377    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 52ms/step - accuracy: 0.9729 - loss: 0.4359 - val_accuracy: 0.9795 - val_loss: 0.4157
    Epoch 9/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 38ms/step - accuracy: 0.9695 - loss: 0.3987    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - accuracy: 0.9709 - loss: 0.3946 - val_accuracy: 0.9760 - val_loss: 0.3680
    Epoch 10/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 40ms/step - accuracy: 0.9671 - loss: 0.3571    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.9685 - loss: 0.3518 - val_accuracy: 0.9815 - val_loss: 0.3190
    Epoch 11/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 38ms/step - accuracy: 0.9725 - loss: 0.3109    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.9732 - loss: 0.3051 - val_accuracy: 0.9705 - val_loss: 0.2687
    Epoch 12/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - accuracy: 0.9630 - loss: 0.2624    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 43ms/step - accuracy: 0.9645 - loss: 0.2609 - val_accuracy: 0.9782 - val_loss: 0.2258
    Epoch 13/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - accuracy: 0.9683 - loss: 0.2243    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 46ms/step - accuracy: 0.9688 - loss: 0.2214 - val_accuracy: 0.9737 - val_loss: 0.1810
    Epoch 14/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 36ms/step - accuracy: 0.9670 - loss: 0.1867    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.9671 - loss: 0.1843 - val_accuracy: 0.9795 - val_loss: 0.1458
    Epoch 15/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - accuracy: 0.9713 - loss: 0.1496    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 46ms/step - accuracy: 0.9705 - loss: 0.1503 - val_accuracy: 0.9790 - val_loss: 0.1172
    Epoch 16/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - accuracy: 0.9702 - loss: 0.1275    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 44ms/step - accuracy: 0.9704 - loss: 0.1265 - val_accuracy: 0.9795 - val_loss: 0.0970
    Epoch 17/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - accuracy: 0.9691 - loss: 0.1133    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - accuracy: 0.9698 - loss: 0.1096 - val_accuracy: 0.9775 - val_loss: 0.0864
    Epoch 18/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 38ms/step - accuracy: 0.9673 - loss: 0.1096    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.9686 - loss: 0.1038 - val_accuracy: 0.9783 - val_loss: 0.0772
    Epoch 19/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 42ms/step - accuracy: 0.9671 - loss: 0.0957    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.9681 - loss: 0.0927 - val_accuracy: 0.9665 - val_loss: 0.0848
    Epoch 20/20
    1/2 ━━━━━━━━━━━━━━━━━━━━ 0s 36ms/step - accuracy: 0.9602 - loss: 0.1126    2/2 ━━━━━━━━━━━━━━━━━━━━ 0s 56ms/step - accuracy: 0.9620 - loss: 0.1076 - val_accuracy: 0.9770 - val_loss: 0.0705




.. GENERATED FROM PYTHON SOURCE LINES 82-84

Plot training history
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: Python

    dense_net.plot_model_history(history)




.. image-sg:: /gallery/images/sphx_glr_classifier_dense_002.png
   :alt: Loss, Accuracy
   :srcset: /gallery/images/sphx_glr_classifier_dense_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-89

Predict and visualize on a test signal
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: Python

    dense_net.plot_prediction(
        signal=dataset.signals[0:1, :],
        threshold=0.4
    )


.. image-sg:: /gallery/images/sphx_glr_classifier_dense_003.png
   :alt: Predicted Region of Interest
   :srcset: /gallery/images/sphx_glr_classifier_dense_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 1 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.419 seconds)


.. _sphx_glr_download_gallery_classifier_dense.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: classifier_dense.ipynb <classifier_dense.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: classifier_dense.py <classifier_dense.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: classifier_dense.zip <classifier_dense.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
